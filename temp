def householder(vec):
    """Construct a Householder reflection to zero out 2nd and further components of a vector.

    Parameters
    ----------
    vec : array-like of floats, shape (n,)
        Input vector
    
    Returns
    -------
    outvec : array of floats, shape (n,)
        Transformed vector, with ``outvec[1:]==0`` and ``|outvec| == |vec|``
    H : array of floats, shape (n, n)
        Orthogonal matrix of the Householder reflection
    """
    vec = np.asarray(vec, dtype=float)
    if vec.ndim != 1:
        raise ValueError("vec.ndim = %s, expected 1" % vec.ndim)
    if np.sum([x**2 for x in vec]) - (vec[0])**2 == 0:
        H = np.identity(vec.size)
        y = vec
        y[0] = abs(y[0])
    else:
        y = np.zeros_like(vec)
        y[0] = np.sqrt(np.sum([x**2 for x in vec]))
        u = (vec - y)/np.linalg.norm(vec - y)
        H = np.identity(u.size) - 2*np.outer(u, u)
    return y, H  
